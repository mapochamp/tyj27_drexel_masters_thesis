-----------------------------------------------------------------------------
|                                                                           |
|                                                                           |
|                       scratchpad memory outline                           |
|                                                                           |
|                                                                           |
-----------------------------------------------------------------------------

- what a spm is

- where spm's are used
	- embedded
	- DLA

- register allocation
	- graph coloring
	- spilling

- scratchpad memory management
	- graph coloring
		- graph coloring + memory coloring paper + toplib
	- heursitics
		- papers referenced in graph coloring paper
		- on sram
		- top lib
	- ILP
		- papers referenced in graph coloring paper + multicore w/e paper
	- virtual memory / MMU style

-----------------------------------------------------------------------------
|                                                                           |
|                                                                           |
|                       notes + scratch                                     |
|                                                                           |
|                                                                           |
-----------------------------------------------------------------------------
Toplib does graph coloring for all the tensors and i'm guessing so does onsram. how tf do you do this on
multiple spms?

toplib does a thing where the partition sizes of the spm is the max(same color tensors)
so its basically register allocation but with heterogenous register sizes.

I guess i can do this with register spilling on 3 spms

Greedy implementation: they don't specify how they color or build the graph but they do
tell you the entire algorthim if you figure that part out. all you know is that its greedy
coloring. ig i can find an implmentation online somehere..

Scratchpad memory (SPM), a fast on-chip SRAM managed by software, is widely used in embedded
systems. This article introduces a general-purpose compiler approach, called memory coloring, to
assign static data aggregates, such as arrays and structs, in a program to an SPM. The novelty of this
approach lies in partitioning the SPM into a pseudo–register file (with interchangeable and aliased
registers), splitting the live ranges of data aggregates to create potential data transfer statements
between SPM and off-chip memory, and finally, adapting an existing graph coloring algorithm for
register allocation to assign the data aggregates to the pseudo–register file. - graph coloring paper

 First, SPMs are more energy efficient and cost efficient
than caches since they do not need complex tag-decoding logic. Second, in em-
bedded applications with regular data access patterns, an SPM can outperform
a cache memory, since software can better choreograph the data movements
between SPM and off-chip memory. Finally, such a software-managed strategy
guarantees better timing predictability, which is critical in hard real-time sys-
tems. Given these advantages, SPMs have been increasingly incorporated in
modern embedded systems - graph coloring paper

^ in the same vein, because DL workloads have deterministic schedules, we spms are a good choice
over caches when running statically compiled graphs. In the case of eager mode, this is debatable.

For SPM-based systems, the programmer or compiler must schedule explicit
data transfers between SPM and off-chip memory. The effectiveness of such
an SPM management affects critically the performance and energy cost of an
application. In today’s industry, this task is largely accomplished manually.
The programmers often spend a lot of time on partitioning data and insert-
ing explicit data transfers required between SPM and off-chip memory. Such
a manual approach is often time consuming and error prone. Moreover, the
handcrafted code is not portable, since it is usually customized to a particular
architecture - graph coloring paper

To overcome these limitations, we propose a general-purpose compiler ap-
proach, called memory coloring, to determining the dynamic allocation and
deallocation of static data aggregates, such as global and stack-allocated
arrays and structs in a C-like program, so as to maximize the performance of
the pro- gram. Whenever we speak of arrays in this article, we mean both kinds
of data aggregates. An array whose size exceeds that of the SPM under
consideration cannot be placed entirely in the SPM. Such arrays can be tiled
into smaller “ar- rays” by means of loop tiling n the proposed approach, the
continuous space of an SPM is parti- tioned into a pseudo–register file (with
interchangeable and aliased registers).  The data aggregates are the register
candidates to be assigned to the SPM via a generalized graph coloring
allocator, which can be any traditional graph coloring allocator generalized as
described in Smith et al. [2004] to handle in- terchangeable and aliased
registers. Unlike scalars, data aggregates typically have longer live ranges,
so live range splitting may be used beneficially to split their live ranges
into smaller pieces. The splitting points are the places to insert all required
data transfers between SPM and off-chip memory. During the col- oring phase,
register coalescing is applied to reduce unnecessary data transfers that would
otherwise have been introduced into the final program - graph coloring paper


This component will partition the continuous space of an SPM into a pseudo–
register file (with interchangeable and aliased registers). This is the key to
allowing us to map the SPM allocation problem into the classic register alloca-
tion problem. The sizes of arrays in a program considered for SPM allocation are aligned to
a predefined constant value, ALIGN UNIT, in bytes. All arrays with a common
aligned size are clustered into a common equivalent class called an array class.
For each array class of a particular size, the SPM is partitioned into a register
class such that each register in the class can hold exactly one array of that size.
A detailed algorithm that formalizes one partitioning scheme can be found in
Li et al.
^ so basically they cluster all the arrays with the same size/alignemnt together and then
partition registers based on those sizes.

If i'm reading this correctly, they split array live ranges into just the used portions. in our case
we use the entire thing lmao.



Existing methods: ILP, heurstic, color graphing
